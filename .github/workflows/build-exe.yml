name: Build and Publish Windows Executable 🖥️
on:
  push:
    branches: [main, master]
  schedule:
    # 每天UTC时间0:00自动运行（相当于北京时间8:00）
    - cron: '0 0 * * *'
  workflow_dispatch:  # 允许手动触发
jobs:
  build-windows:
    name: Build Windows executable 🖥️
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip install paddle
          pip install paddleocr

      - name: Regenerate Resources (if using PyQt)
        run: |
          pip install pyqt5
          pyrcc5 -o libs/resources.py resources.qrc

      - name: Build executable with PyInstaller
        run: |
          pyinstaller -c PPOCRLabel.py --collect-all paddleocr --collect-all pyclipper --collect-all imghdr --collect-all skimage --collect-all imgaug --collect-all scipy.io --collect-all lmdb --collect-all paddle --hidden-import=pyqt5 -p ./libs -p ./ -p ./data -p ./resources -F

      - name: Store the executable
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: dist/*.exe

  publish-to-github:
    name: Publish Windows Executable to GitHub Release
    needs:
      - build-windows
    runs-on: windows-latest  # 改为在Windows上运行，与构建环境一致
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
    steps:
      - name: Download the executable
        uses: actions/download-artifact@v4
        with:
          name: windows-executable
          path: dist/

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"
        shell: bash

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          $VERSION="v$(Get-Date -Format 'yyyy.MM.dd')"
          $RELEASE_EXISTS=(gh release view $VERSION --repo ${{ github.repository }} 2>&1 | Select-String "release not found" -Quiet)
          
          if ($RELEASE_EXISTS) {
            gh release create $VERSION --repo ${{ github.repository }} --notes "PPOCRLabel Windows Executable Release $VERSION (Auto-build)"
          } else {
            gh release delete $VERSION --yes --repo ${{ github.repository }}
            gh release create $VERSION --repo ${{ github.repository }} --notes "PPOCRLabel Windows Executable Release $VERSION (Auto-build)"
          }

      - name: Upload executable to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          $VERSION="v$(Get-Date -Format 'yyyy.MM.dd')"
          gh release upload $VERSION dist/*.exe --repo ${{ github.repository }} --clobber

      - name: Generate SHA256 checksums
        run: |
          cd dist
          Get-FileHash -Algorithm SHA256 *.exe | Out-File -FilePath SHA256SUMS.txt
          cd ..

      - name: Upload checksums to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          $VERSION="v$(Get-Date -Format 'yyyy.MM.dd')"
          gh release upload $VERSION dist/SHA256SUMS.txt --repo ${{ github.repository }} --clobber